@page "/fetchbio"
@using DogShowApp.Shared.Data
@using System.Reflection
@inject HttpClient Http

<PageTitle>Biographies</PageTitle>

<h1>Dog Biographies</h1>

<p></p>



@if (bioList == null)
{
        <p><em>Loading...</em></p>
}
else
{
  
        
<div style="font-size:2.5em;">    
 <DataGrid TItem="Bio"
     Data="@bioList" 
     @bind-SelectedRow="@selectedBio" 
     RowRemoving="OnRowRemoving"
     RowUpdated="OnRowUpdated"
     Editable
     Responsive 
     Context="context">
     <DataGridColumn TItem="Bio" Field="@nameof(Bio.DogImageURL)" Caption="" Width="50" >
        <DisplayTemplate>
            @{
                Bio bio = context as Bio;
                            <img src="@bio.DogImageURL" 
                            style="width:256px"/>
            }
        </DisplayTemplate>
    </DataGridColumn>
            
    <DataGridCommandColumn />

    <DataGridColumn Field="@nameof(Bio.DogName)" Caption="Dog's Name" Width="1" /> 
    <DataGridColumn Field="@nameof(Bio.DogDescription)" Caption="Breed " Width="1" />
    <DataGridColumn Field="@nameof(Bio.TrainerName)" Caption="Trainer's Name" Width="1" />
    <DataGridColumn Field="@nameof(Bio.TrainerImageURL)" Caption="Bio" Width="100" />

    </DataGrid>
    </div>
}


@code {
    Bio bio = new Bio();
    private List<Bio>? bioList;
    private Bio? selectedBio;

    protected override async Task OnInitializedAsync()
    {
        bioList = await Http.GetFromJsonAsync<List<Bio>>("Bio");
    }

    private async void OnRowRemoving(CancellableRowChange<Bio> itemBeingRemoved)
    {
        int temp = bioList!.IndexOf(itemBeingRemoved.Item);
        await Http.DeleteAsync("Bio?item=" + temp);
    }

    private async void OnRowUpdated(SavedRowItem<Bio, Dictionary<string, object>> e)
    {
        int bioIndex = bioList!.IndexOf(e.Item);

        List<Object?> properties = new List<Object?>();

        foreach (PropertyInfo prop in e.Item.GetType().GetProperties())
        {
            properties.Add(prop.GetValue(e.Item));
        }

        await Http.PutAsJsonAsync("Bio", new Tuple<Int32, List<Object?>>(bioIndex, properties));
    }

}