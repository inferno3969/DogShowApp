@page "/tickets"
@using DogShowApp.Shared.Data
@using System.ComponentModel.DataAnnotations
@using Blazorise.LoadingIndicator
@inject HttpClient Http
@inject NavigationManager navigationManager

<PageTitle>Tickets</PageTitle>

<Steps @ref="stepsRef" @bind-SelectedStep="selectedStep" NavigationAllowed="NavigationAllowed">
    <Items>
        <Step Name="1">
            <Marker>
                <Icon Name="IconName.TicketAlt" />
            </Marker>
            <Caption>
                Tickets
            </Caption>
        </Step>
        <Step Name="2">
            <Marker>
                <Icon Name="IconName.Pen" />
            </Marker>
            <Caption>
                Review
            </Caption>
        </Step>
        <Step Name="3">
            <Marker>
                <Icon Name="IconName.ShoppingCart" />
            </Marker>
            <Caption>
                Checkout
            </Caption>
        </Step>
        <Step Name="4">
            <Marker>
                <Icon Name="IconName.Flag" />
            </Marker>
            <Caption>
                Finish
            </Caption>
        </Step>
    </Items>
    <Content>
        <StepPanel Name="1">
            <Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged" Pills FullWidth>
                <Items>
                    <Tab Name="eventticket">Event Ticket</Tab>
                    <Tab Name="seasonticket">Season Ticket</Tab>
                </Items>
                <Content>
                    <TabPanel Name="eventticket">
                        <Card>
                            <CardBody>
                                <Field>
                                    <FieldLabel>Enter in the number of event tickets you would like to purchase.</FieldLabel>
                                    <FieldLabel>Event tickets are for one event per one event ticket.</FieldLabel>
                                    <Div Display="Display.Flex" Class="justify-content-center">
                                        <NumericEdit TValue="int" @bind-Value="@numOfEventTickets" Placeholder="Enter number of tickets." Min=1>
                                            <Feedback>
                                                <ValidationNone>Please Enter Your Email. </ValidationNone>
                                                <ValidationSuccess>Email is good</ValidationSuccess>
                                                <ValidationError>Please Enter A Valid Email</ValidationError>
                                            </Feedback>
                                        </NumericEdit>
                                    </Div>

                                </Field>
                                <Button Color="Color.Primary" Clicked="@AddToCart">
                                    Add To Cart
                                </Button>
                            </CardBody>
                        </Card>
                    </TabPanel>
                    <TabPanel Name="seasonticket">
                        <Card>
                            <CardBody>
                                <Field>
                                    <FieldLabel>Enter in the number of season tickets you would like to purchase.</FieldLabel>
                                    <FieldLabel>Season tickets are for the whole season per one season ticket.</FieldLabel>
                                    <Div Display="Display.Flex" Class="justify-content-center">
                                        <NumericEdit TValue="int" @bind-Value="@numOfSeasonTickets" Placeholder="Enter number of tickets." Min=1>
                                        </NumericEdit>
                                    </Div>

                                </Field>
                                <Button Color="Color.Primary" Clicked="@AddToCart">
                                    Add To Cart
                                </Button>
                            </CardBody>
                        </Card>
                    </TabPanel>
                </Content>
            </Tabs>

        </StepPanel>
        <StepPanel Name="2">
            <Card>
                <CardBody>
                    <Jumbotron Background="Background.Transparent" Margin="Margin.Is4.FromBottom">
                        <JumbotronTitle Size="JumbotronTitleSize.Is4">Order Review</JumbotronTitle>
                        <JumbotronSubtitle>
                            Please review your order. If you want to edit the amount of each ticket type, press the "Edit Tickets" button.
                            If you want to cancel your order, press the "Cancel Order" button. If you want to proceed to checkout,
                            press the "Checkout" button.
                        </JumbotronSubtitle>
                        <Divider DividerType="DividerType.Solid" />
                        <Paragraph>
                            Regular Tickets: @Login.user.numOfEventTickets | Price: @eventTicketPrice
                        </Paragraph>
                        <Divider DividerType="DividerType.Solid" />
                        <Paragraph>
                            Season Tickets: @Login.user.numOfSeasonTickets | Price: @seasonTicketPrice
                        </Paragraph>
                        <Divider DividerType="DividerType.Solid" />
                        <Button Color="Color.Primary" Clicked="@ShowModal">Edit Tickets</Button>
                        <Button Color="Color.Danger" Clicked="@CancelOrder">Cancel Order</Button>
                        <Button Color="Color.Success" Clicked="@Checkout">Checkout</Button>
                    </Jumbotron>

                    <Modal @ref="modalRef">
                        <ModalContent Centered>
                            <ModalHeader>
                                <ModalTitle>Ticket Edit</ModalTitle>
                                <CloseButton />
                            </ModalHeader>
                            <ModalBody>
                                <Field>
                                    <FieldLabel>Regular Tickets</FieldLabel>
                                    <NumericEdit TValue="int" @bind-Value="@numOfEventTickets" Placeholder="Enter number of tickets" />
                                </Field>
                                <Field>
                                    <FieldLabel>Season Tickets</FieldLabel>
                                    <NumericEdit TValue="int" @bind-Value="@numOfSeasonTickets" Placeholder="Enter number of season tickets" />
                                </Field>
                            </ModalBody>
                            <ModalFooter>
                                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                                <Button Color="Color.Primary" Clicked="@HideModal">Save Changes</Button>
                            </ModalFooter>
                        </ModalContent>
                    </Modal>
                </CardBody>
            </Card>
        </StepPanel>
        <StepPanel Name="3">
            <Jumbotron Background="Background.Light" Margin="Margin.Is4.FromBottom">
                <JumbotronTitle Size="JumbotronTitleSize.Is4">Hello, world!</JumbotronTitle>
                <JumbotronSubtitle>
                    This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.
                </JumbotronSubtitle>
                <Divider></Divider>
                <Paragraph>
                    <Div Display="Display.Flex" Class="justify-content-left">
                        <Field>
                            <FieldLabel>Full Name</FieldLabel>
                            <TextEdit Placeholder="Big M. Chungus" /> />
                        </Field>
                    </Div>
                    <Div Display="Display.Flex" Class="justify-content-left">
                        <Field>
                            <FieldLabel>Email</FieldLabel>
                            <Validation Validator="ValidationRule.IsEmail">
                                <TextEdit Placeholder="bigchungus42069@gmail.com">
                                    <Feedback>
                                        <ValidationError>Not a valid email!</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </Field>
                    </Div>
                    <Div Display="Display.Flex" Class="justify-content-left">
                        <Field>
                            <FieldLabel>Address</FieldLabel>
                            <Validation Validator="ValidationRule.IsNotEmpty">
                                <TextEdit Placeholder="123 Big Chungus Ln.">
                                    <Feedback>
                                        <ValidationError>Can't be empty!</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </Field>
                    </Div>
                    <Div Display="Display.Flex" Class="justify-content-left">
                        <Field>
                            <FieldLabel>City</FieldLabel>
                            <Validation Validator="ValidationRule.IsNotEmpty">
                                <TextEdit Placeholder="New York">
                                    <Feedback>
                                        <ValidationError>Can't be empty!</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </Field>
                    </Div>
                    <Div Display="Display.Flex" Class="justify-content-left">
                        <Field>
                            <FieldLabel>State</FieldLabel>
                            <Validation Validator="ValidationRule.IsUppercase">
                                <InputMask Mask="aa">
                                    <Feedback>
                                        <ValidationError>Can't be empty!</ValidationError>
                                    </Feedback>
                                </InputMask>
                            </Validation>
                        </Field>
                    </Div>


                </Paragraph>
            </Jumbotron>
        </StepPanel>
        <StepPanel Name="4">
            Step 4
        </StepPanel>
    </Content>
</Steps>

<Div Display="Display.Flex" Class="justify-content-center">
    <Button Color="Color.Secondary" Clicked="() => stepsRef.PreviousStep()">
        Previous
    </Button>
    <Button Color="Color.Primary" Clicked="() => stepsRef.NextStep()">
        Next
    </Button>
</Div>
@code {

    Ticket ticket = new Ticket();



    private Steps stepsRef;
    private string email;
    private string selectedStep = "1";

    string ticketType;
    int numOfEventTickets;
    int numOfSeasonTickets;

    decimal eventTicketPrice;
    decimal seasonTicketPrice;
    decimal finalPrice;


    string creditCardNumber;
    private Modal modalRef;

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task HideModal()
    {
        Login.user.numOfEventTickets = numOfEventTickets;
        Login.user.numOfSeasonTickets = numOfSeasonTickets;
        numOfEventTickets = ticket.numOfEventTickets * numOfEventTickets;
        seasonTicketPrice = ticket.seasonTicketsPrice * numOfSeasonTickets;
        return modalRef.Hide();
    }

    private bool NavigationAllowed(StepNavigationContext context)
    {
        if (context.CurrentStepIndex == 1 && context.NextStepIndex > 2)
        {
            return false;
        }

        return true;
    }

    string selectedTab = "eventticket";

    private Task OnSelectedTabChanged(string name)
    {

        selectedTab = name;

        return Task.CompletedTask;
    }

    private void AddToCart()
    {
        if (selectedTab == "eventticket")
        {
            Login.user.numOfEventTickets += numOfEventTickets;
            eventTicketPrice = ticket.eventTicketsPrice;
            eventTicketPrice *= Login.user.numOfEventTickets;
        }
        if (selectedTab == "seasonticket")
        {
            Login.user.numOfSeasonTickets += numOfSeasonTickets;
            seasonTicketPrice = ticket.seasonTicketsPrice;
            seasonTicketPrice *= Login.user.numOfSeasonTickets;
        }
    }

    private void CancelOrder()
    {
        Login.user.numOfEventTickets = 0;
        Login.user.numOfSeasonTickets = 0;
        navigationManager.NavigateTo("/");
    }

    private void Checkout()
    {
        selectedStep = "3";
    }

}
