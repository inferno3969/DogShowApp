@page "/tickets"
@using DogShowApp.Shared.Data
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager navigationManager

<PageTitle>Tickets</PageTitle>

<Steps @ref="stepsRef" @bind-SelectedStep="selectedStep" NavigationAllowed="NavigationAllowed">
    <Items>
        <Step Name="1">
            <Marker>
                <Icon Name="IconName.TicketAlt" />
            </Marker>
            <Caption>
                Tickets
            </Caption>
        </Step>
        <Step Name="2">
            <Marker>
                <Icon Name="IconName.Pen" />
            </Marker>
            <Caption>
                Review
            </Caption>
        </Step>
        <Step Name="3">
            <Marker>
                <Icon Name="IconName.ShoppingCart" />
            </Marker>
            <Caption>
                Checkout
            </Caption>
        </Step>
        <Step Name="4">
            <Marker>
                <Icon Name="IconName.Flag" />
            </Marker>
            <Caption>
                Finish
            </Caption>
        </Step>
    </Items>
    <Content>
        <StepPanel Name="1">
            <Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged" Pills FullWidth>
                <Items>
                    <Tab Name="eventticket">Event Ticket</Tab>
                    <Tab Name="seasonticket">Season Ticket</Tab>
                </Items>
                <Content>
                    <TabPanel Name="eventticket">
                        <Card>
                            <CardBody>
                                <Field>
                                    <FieldLabel>Enter in the number of event tickets you would like to purchase.</FieldLabel>
                                    <FieldLabel>Event tickets are for one event per one event ticket.</FieldLabel>
                                    <Div Display="Display.Flex" Class="justify-content-center">
                                        <NumericEdit TValue="int" @bind-Value="@numOfEventTickets" Placeholder="Enter number of tickets." Min=1>
                                            <Feedback>
                                                <ValidationNone>Please Enter Your Email. </ValidationNone>
                                                <ValidationSuccess>Email is good</ValidationSuccess>
                                                <ValidationError>Please Enter A Valid Email</ValidationError>
                                            </Feedback>
                                        </NumericEdit>
                                    </Div>

                                </Field>
                                <Button Color="Color.Primary" Clicked="@AddToCart">
                                    Add To Cart
                                </Button>
                            </CardBody>
                        </Card>
                    </TabPanel>
                    <TabPanel Name="seasonticket">
                        <Card>
                            <CardBody>
                                <Field>
                                    <FieldLabel>Enter in the number of season tickets you would like to purchase.</FieldLabel>
                                    <FieldLabel>Season tickets are for the whole season per one season ticket.</FieldLabel>
                                    <Div Display="Display.Flex" Class="justify-content-center">
                                        <NumericEdit TValue="int" @bind-Value="@numOfSeasonTickets" Placeholder="Enter number of tickets." Min=1>
                                        </NumericEdit>
                                    </Div>

                                </Field>
                                <Button Color="Color.Primary" Clicked="@AddToCart">
                                    Add To Cart
                                </Button>
                            </CardBody>
                        </Card>
                    </TabPanel>
                </Content>
            </Tabs>

        </StepPanel>
        <StepPanel Name="2">
            <Card>
                <CardBody>
                    <Jumbotron Background="Background.Transparent" Margin="Margin.Is4.FromBottom">
                        <JumbotronTitle Size="JumbotronTitleSize.Is4">Order Review</JumbotronTitle>
                        <JumbotronSubtitle>
                            Please review your order. If you want to edit the amount of each ticket type, press the "Edit Tickets" button.
                            If you want to cancel your order, press the "Cancel Order" button. If you want to proceed to checkout,
                            press the "Checkout" button.
                        </JumbotronSubtitle>
                        <Divider DividerType="DividerType.Solid" />
                        <Paragraph>
                            Regular Tickets: @numOfEventTicketsTemp | Price: @eventTicketPrice
                        </Paragraph>
                        <Divider DividerType="DividerType.Solid" />
                        <Paragraph>
                            Season Tickets: @numOfSeasonTicketsTemp | Price: @seasonTicketPrice
                        </Paragraph>
                        <Divider DividerType="DividerType.Solid" />
                        <Button Color="Color.Primary" Clicked="@ShowModal">Edit Tickets</Button>
                        <Button Color="Color.Danger" Clicked="@CancelOrder">Cancel Order</Button>
                        <Button Color="Color.Success" Clicked="@Checkout">Checkout</Button>
                    </Jumbotron>

                    <Modal @ref="modalRef">
                        <ModalContent Centered>
                            <ModalHeader>
                                <ModalTitle>Ticket Edit</ModalTitle>
                                <CloseButton />
                            </ModalHeader>
                            <ModalBody>
                                <Field>
                                    <FieldLabel>Regular Tickets</FieldLabel>
                                    <NumericEdit TValue="int" @bind-Value="@numOfEventTickets" Placeholder="Enter number of tickets" />
                                </Field>
                                <Field>
                                    <FieldLabel>Season Tickets</FieldLabel>
                                    <NumericEdit TValue="int" @bind-Value="@numOfSeasonTickets" Placeholder="Enter number of season tickets" />
                                </Field>
                            </ModalBody>
                            <ModalFooter>
                                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                                <Button Color="Color.Primary" Clicked="@HideModal">Save Changes</Button>
                            </ModalFooter>
                        </ModalContent>
                    </Modal>
                </CardBody>
            </Card>
        </StepPanel>
        <StepPanel Name="3">
            <Jumbotron Background="Background.Transparent" Margin="Margin.Is4.FromBottom">
                <JumbotronTitle Size="JumbotronTitleSize.Is4">Checkout Form</JumbotronTitle>
                <JumbotronSubtitle>
                    Please fill out these forms to proceed to checkout.
                </JumbotronSubtitle>
                <Divider></Divider>
                <Paragraph>
                    <Card>
                        <CardBody>
                            <Div Display="Display.Flex" Class="justify-content-center">
                                <Validations Mode="ValidationMode.Auto" ValidateOnLoad="false">

                                    <Div Display="Display.Flex" Class="justify-content-center">

                                        <Card>
                                            <CardBody>
                                                <Field>
                                                    <FieldLabel>Full Name</FieldLabel>
                                                    <TextEdit @bind-Text="@tempFullName" Placeholder="Ex: Big M. Chungus" />
                                                </Field>

                                                <Field>
                                                    <FieldLabel>Email</FieldLabel>
                                                    <Validation Validator="ValidationRule.IsEmail">
                                                        <TextEdit @bind-Text="@tempEmail" Placeholder="Ex: bigchungus42069@gmail.com">
                                                            <Feedback>
                                                                <ValidationError>Not a valid email.</ValidationError>
                                                            </Feedback>
                                                        </TextEdit>
                                                    </Validation>
                                                </Field>
                                                <Field>
                                                    <FieldLabel>Address</FieldLabel>
                                                    <Validation Validator="ValidationRule.IsNotEmpty">
                                                        <TextEdit @bind-Text="@tempStreetAddress" Placeholder="Ex: 123 Big Chungus Ln.">
                                                            <Feedback>
                                                                <ValidationError>This field can not be left empty.</ValidationError>
                                                            </Feedback>
                                                        </TextEdit>
                                                    </Validation>
                                                </Field>

                                                <Field>
                                                    <FieldLabel>City</FieldLabel>
                                                    <Validation Validator="ValidationRule.IsNotEmpty">
                                                        <TextEdit @bind-Text="@tempCity" Placeholder="New York">
                                                            <Feedback>
                                                                <ValidationError>This field can not be left empty.</ValidationError>
                                                            </Feedback>
                                                        </TextEdit>
                                                    </Validation>
                                                </Field>

                                                <Field>
                                                    <FieldLabel>State</FieldLabel>
                                                    <Validation Validator="ValidationRule.IsUppercase">
                                                        <InputMask @bind-Value="@tempState" Mask="aa" Placeholder="XX">
                                                            <Feedback>
                                                                <ValidationError>Must be an uppercase two letter state.</ValidationError>
                                                            </Feedback>
                                                        </InputMask>
                                                    </Validation>
                                                </Field>
                                                <Field>
                                                    <FieldLabel>Zip Code</FieldLabel>
                                                    <Validation Validator="ValidationRule.IsNotEmpty">
                                                        <InputMask @bind-Value="@tempZipCode" Mask="99999" Placeholder="XXXXX">
                                                            <Feedback>
                                                                <ValidationError>Must be 5 numbers.</ValidationError>
                                                            </Feedback>
                                                        </InputMask>
                                                    </Validation>
                                                </Field>
                                            </CardBody>
                                        </Card>
                                    </Div>
                                    <Div Display="Display.Flex" Class="justify-content-left">
                                        <Card>
                                            <CardBody>
                                                <Field>
                                                    <FieldLabel>Name on Card</FieldLabel>
                                                    <TextEdit Placeholder="Big Man Chungus" />
                                                </Field>

                                                <Field>
                                                    <FieldLabel>Credit Card Number</FieldLabel>
                                                    <Validation Validator="ValidationRule.IsNotEmpty">
                                                        <InputMask @bind-Value="@creditCardNumber" Mask="9999-9999-9999-9999" Placeholder="XXXX-XXXX-XXXX-XXXX">
                                                            <Feedback>
                                                                <ValidationError>Can't be empty!</ValidationError>
                                                            </Feedback>
                                                        </InputMask>
                                                    </Validation>
                                                </Field>
                                                <Field>
                                                    <FieldLabel>Expiration Date</FieldLabel>
                                                    <Validation Validator="ValidationRule.IsNotEmpty">
                                                        <InputMask Alias="datetime" InputFormat="dd/mm/yyyy" OutputFormat="ddmmyyyy" Placeholder="XX/XX/XXXX">
                                                            <Feedback>
                                                                <ValidationError>Can't be empty!</ValidationError>
                                                            </Feedback>
                                                        </InputMask>
                                                    </Validation>
                                                </Field>
                                                <Field>
                                                    <FieldLabel>CVV</FieldLabel>
                                                    <Validation Validator="ValidationRule.IsNotEmpty">
                                                        <InputMask Mask="999" Placeholder="XXX">
                                                            <Feedback>
                                                                <ValidationError>Can't be empty!</ValidationError>
                                                            </Feedback>
                                                        </InputMask>
                                                    </Validation>
                                                </Field>
                                            </CardBody>
                                        </Card>
                                    </Div>
                                    <Div Display="Display.Flex" Class="justify-content-center">

                                        <Card>
                                            <CardBody>
                                                <FieldLabel>Cart</FieldLabel>
                                                <Divider></Divider>
                                                <Paragraph>Event Tickets</Paragraph>
                                                <Divider></Divider>
                                                <Paragraph>Quantity: @numOfEventTicketsTemp</Paragraph>
                                                <Paragraph>Price: $@eventTicketPrice</Paragraph>
                                                <Divider></Divider>
                                                <Paragraph>Season Tickets</Paragraph>
                                                <Divider></Divider>
                                                <Paragraph>Quantity: @numOfSeasonTicketsTemp</Paragraph>
                                                <Paragraph>Price: $@seasonTicketPrice</Paragraph>
                                                <Divider></Divider>
                                                <Paragraph>Total</Paragraph>
                                                <Divider></Divider>
                                                <Paragraph>Total Price: $@totalPrice</Paragraph>
                                                <Paragraph>Total Tickets: @totalNumOfTickets</Paragraph>
                                                <Button Color="Color.Danger" Clicked="@CancelTransaction">Cancel Order</Button>
                                                <Button Color="Color.Success" Clicked="@CompleteTransaction">Checkout</Button>
                                            </CardBody>
                                        </Card>
                                    </Div>
                                </Validations>
                            </Div>
                        </CardBody>
                    </Card>
                </Paragraph>

            </Jumbotron>
        </StepPanel>
        <StepPanel Name="4">
            <Jumbotron Background="Background.Transparent" Margin="Margin.Is4.FromBottom">
                <JumbotronTitle Size="JumbotronTitleSize.Is4">Thank You For Ordering!</JumbotronTitle>
                <JumbotronSubtitle>
                    Below is your receipt of your transaction.
                </JumbotronSubtitle>
                <Divider DividerType="DividerType.Solid" />
                <Paragraph>
                    Date of Transaction: @DateTime.Now.ToShortDateString() @DateTime.Now.ToShortTimeString()
                </Paragraph>
                <Paragraph>
                    Name: @Login.user.fullName
                </Paragraph>
                <Paragraph>
                    Address: @Login.user.streetAddress, @Login.user.city, @Login.user.state @Login.user.zipCode
                </Paragraph>
                <Paragraph>
                    Email: @Login.user.Email
                </Paragraph>
                <Divider DividerType="DividerType.Solid" />
                <Paragraph>
                    Event Tickets
                </Paragraph>
                <Paragraph>
                    Quantity: @Login.user.numOfEventTickets
                </Paragraph>
                <Paragraph>
                    Price: $@eventTicketPrice
                </Paragraph>
                <Divider DividerType="DividerType.Solid" />
                <Paragraph>
                    Season Tickets
                </Paragraph>
                <Paragraph>
                    Quantity: @Login.user.numOfSeasonTickets
                </Paragraph>
                <Paragraph>
                    Price: $@seasonTicketPrice
                </Paragraph>
                <Divider DividerType="DividerType.Solid" />
                <Paragraph>
                    Transaction Total
                </Paragraph>
                <Paragraph>
                    Quantity: @totalNumOfTickets
                </Paragraph>
                <Paragraph>
                    Price: $@totalPrice
                </Paragraph>
                <Divider DividerType="DividerType.Solid" />
                <Button Color="Color.Primary" Clicked="@ExitCheckout">Exit</Button>
            </Jumbotron>
        </StepPanel>
    </Content>
</Steps>

<Div Display="Display.Flex" Class="justify-content-center">
    <Button Color="Color.Secondary" Clicked="() => stepsRef.PreviousStep()">
        Previous
    </Button>
    <Button Color="Color.Primary" Clicked="() => stepsRef.NextStep()">
        Next
    </Button>
</Div>

@code {

    Ticket ticket = new Ticket();


    private Steps stepsRef;

    private string selectedStep = "1";

    int numOfEventTickets;
    int numOfSeasonTickets;
    int numOfEventTicketsTemp;
    int numOfSeasonTicketsTemp;
    int totalNumOfTickets;

    decimal eventTicketPrice;
    decimal seasonTicketPrice;
    decimal totalPrice;

    [Required]
    string tempFullName;
    [Required]
    string tempEmail;
    [Required]
    string tempStreetAddress;
    [Required]
    string tempCity;
    [Required]
    string tempState;
    [Required]
    string tempZipCode;
    [Required]
    string creditCardNumber;

    bool firstStepDone;
    bool secondStepDone;
    bool thirdStepDone;

    private Modal modalRef;

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task HideModal()
    {
        numOfEventTicketsTemp = numOfEventTickets;
        numOfSeasonTicketsTemp = numOfSeasonTickets;
        eventTicketPrice = ticket.eventTicketsPrice * numOfEventTickets;
        seasonTicketPrice = ticket.seasonTicketsPrice * numOfSeasonTickets;
        return modalRef.Hide();
    }

    private bool NavigationAllowed(StepNavigationContext context)
    {
        if (context.CurrentStepIndex == 1 && context.NextStepIndex > 1 && firstStepDone == false)
        {
            return false;
        }
        if (context.CurrentStepIndex == 2 && context.NextStepIndex > 2 && secondStepDone == false)
        {
            return false;
        }
        if (context.CurrentStepIndex == 3 && context.NextStepIndex > 3 && thirdStepDone == false)
        {
            return false;
        }
        return true;
    }

    string selectedTab = "eventticket";

    private Task OnSelectedTabChanged(string name)
    {

        selectedTab = name;

        return Task.CompletedTask;
    }

    private void AddToCart()
    {
        if (selectedTab == "eventticket")
        {
            numOfEventTicketsTemp += numOfEventTickets;
            eventTicketPrice = ticket.eventTicketsPrice;
            eventTicketPrice *= numOfEventTicketsTemp;
        }
        if (selectedTab == "seasonticket")
        {
            numOfSeasonTicketsTemp += numOfSeasonTickets;
            seasonTicketPrice = ticket.seasonTicketsPrice;
            seasonTicketPrice *= numOfSeasonTicketsTemp;
        }
        firstStepDone = true;

    }

    private void CancelOrder()
    {
        Login.user.numOfEventTickets = 0;
        Login.user.numOfSeasonTickets = 0;
        navigationManager.NavigateTo("/");
    }

    private void Checkout()
    {
        secondStepDone = true;
        selectedStep = "3";
        totalPrice = eventTicketPrice + seasonTicketPrice;
        totalNumOfTickets = numOfEventTicketsTemp + numOfSeasonTicketsTemp;
    }

    private void CancelTransaction()
    {
        numOfEventTicketsTemp = 0;
        numOfSeasonTicketsTemp = 0;
        totalPrice = 0;
        totalNumOfTickets = 0;
        navigationManager.NavigateTo("/");
    }

    private void CompleteTransaction()
    {
        Login.user.numOfEventTickets = numOfEventTicketsTemp;
        Login.user.numOfSeasonTickets = numOfSeasonTicketsTemp;
        Login.user.fullName = tempFullName;
        Login.user.streetAddress = tempStreetAddress;
        Login.user.city = tempCity;
        Login.user.state = tempState;
        Login.user.zipCode = tempZipCode;

        thirdStepDone = true;
        selectedStep = "4";
    }

    private void ExitCheckout()
    {

        navigationManager.NavigateTo("/");
    }

}