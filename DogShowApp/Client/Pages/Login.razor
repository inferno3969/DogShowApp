@page "/login"
@using DogShowApp.Shared.Data
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@inject HttpClient Http
@inject NavigationManager navigationManager

<PageTitle>Login</PageTitle>

<Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged" Pills FullWidth>
    <Items>
        <Tab Name="login">Login</Tab>
        <Tab Name="register">Register</Tab>
    </Items>
    <Content>
        <TabPanel Name="login">
            <Card>
                <CardBody>
                    <CardTitle>
                        Welcome Back, Please Login
                    </CardTitle>
                </CardBody>
                <CardBody>
                    <Validations @ref="@loginValidationsRef" Mode="ValidationMode.Manual" ValidateOnLoad="false">
                        <Validation Validator="ValidationRule.IsNotEmpty">
                            <Field>
                                <FieldLabel>Username</FieldLabel>
                                <TextEdit @bind-Text="@username" Placeholder="Enter username...">
                                    <Feedback>
                                        <ValidationNone>Please enter your username. </ValidationNone>
                                        <ValidationSuccess>Username is valid.</ValidationSuccess>
                                        <ValidationError>You can't leave this field blank!</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>
                        <Validation>
                            <Field>
                                <FieldLabel>Password</FieldLabel>
                                <TextEdit Role="TextRole.Password" Placeholder="Password" @bind-Text="@password">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>
                    </Validations>
                </CardBody>
                <CardBody>
                    <Button Color="Color.Primary" Clicked="@OnLoginClicked">
                        Login
                    </Button>
                </CardBody>
            </Card>
        </TabPanel>
        <TabPanel Name="register">
            <Card>
                <CardBody>
                    <CardTitle>
                        New Here? Create An Account
                    </CardTitle>
                </CardBody>
                <CardBody>
                    <Validations Mode="ValidationMode.Auto" Model="@user" ValidateOnLoad="false">
                        <Validation>
                            <Field Horizontal>
                                <FieldLabel ColumnSize="ColumnSize.Is2">First Name</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is10">
                                    <TextEdit Placeholder="First Name" @bind-Text="@user.FirstName">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                        </Validation>
                        <Validation>
                            <Field Horizontal>
                                <FieldLabel ColumnSize="ColumnSize.Is2">Last Name</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is10">
                                    <TextEdit Placeholder="Last Name" @bind-Text="@user.LastName">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                        </Validation>
                        <Validation>
                            <Field Horizontal>
                                <FieldLabel ColumnSize="ColumnSize.Is2">Username</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is10">
                                    <TextEdit Placeholder="Enter username" @bind-Text="@user.Username">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                        </Validation>
                        <Validation>
                            <Field Horizontal>
                                <FieldLabel ColumnSize="ColumnSize.Is2">Email</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is10">
                                    <TextEdit Placeholder="Enter email" @bind-Text="@user.Email">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                        </Validation>
                        <Validation>
                            <Field Horizontal>
                                <FieldLabel ColumnSize="ColumnSize.Is2">Password</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is10">
                                    <TextEdit Role="TextRole.Password" Placeholder="Password" @bind-Text="@user.Password">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                        </Validation>
                        <Validation>
                            <Field Horizontal>
                                <FieldLabel ColumnSize="ColumnSize.Is2">Re Password</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is10">
                                    <TextEdit Role="TextRole.Password" Placeholder="Retype password" @bind-Text="@user.ConfirmPassword">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                        </Validation>
                    </Validations>

                </CardBody>
                <CardBody>
                    <Button Color="Color.Primary" Clicked="@OnRegisterClicked">
                        Create Account
                    </Button>
                </CardBody>
            </Card>
        </TabPanel>
    </Content>
</Tabs>


@code {
    public static User user = new User();

    List<User>? userList;

    Validations loginValidationsRef;
    Validations registerValidationsRef;

    string selectedTab = "login";

    string firstName;
    string lastName;
    string email;
    string username;
    string password;
    string confirmPassword;
    bool isAdmin;
    bool rememberMe;

    bool visible;

    private Task OnSelectedTabChanged(string name)
    {
        selectedTab = name;

        return Task.CompletedTask;
    }

    async Task OnLoginClicked()
    {
        userList = await Http.GetFromJsonAsync<List<User>>($"User?username={username}&password={password}");

        if (isAdmin == false)
        {
            user.isLoggedIn = true;
            navigationManager.NavigateTo("/");
        }
        if (username == "bigchungusadmin420" && password == "admin420")
        {
            user.IsAdmin = true;
            navigationManager.NavigateTo("/");
        }
        else
        {
            visible = true;
        }
    }

    async Task OnRegisterClicked()
    {
        firstName = user.FirstName;
        lastName = user.LastName;
        email = user.Email;
        password = user.Password;
        username = user.Username;

        List<Object?> properties = new List<Object?>();

        foreach (PropertyInfo prop in user.GetType().GetProperties())
        {
            properties.Add(prop.GetValue(user));
        }

        HttpResponseMessage response = await Http.PostAsJsonAsync("User", properties);

        selectedTab = "login";
    }
}